version: '3.8'

# Production Cost-Effective Stack  
# NetworkX + PostgreSQL (all storage types)
# Best for: Budget-conscious production deployments

services:
  # LightRAG Application
  lightrag:
    image: ghcr.io/hkuds/lightrag:latest
    container_name: lightrag-cost-effective
    env_file:
      - .env
    environment:
      # Cost-Effective Storage Configuration (PostgreSQL for most storage)
      LIGHTRAG_GRAPH_STORAGE: NetworkXStorage
      LIGHTRAG_VECTOR_STORAGE: PGVectorStorage
      LIGHTRAG_KV_STORAGE: PGKVStorage
      LIGHTRAG_DOC_STATUS_STORAGE: PGDocStatusStorage
      
      # PostgreSQL Connection
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: lightrag_user
      POSTGRES_PASSWORD: lightrag_pass
      POSTGRES_DATABASE: lightrag
      POSTGRES_MAX_CONNECTIONS: 20
      
      # Performance settings for single database
      MAX_ASYNC: 4
      MAX_TOKENS: 32768
      ENABLE_LLM_CACHE: true
      ENABLE_LLM_CACHE_FOR_EXTRACT: true
    ports:
      - "9621:9621"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./data/inputs:/app/inputs
      - ./data/rag_storage:/app/rag_storage
    networks:
      - lightrag-cost-effective-network
    restart: unless-stopped

  # PostgreSQL with pgvector for Vector, KV, and Document Status Storage
  postgres:
    image: pgvector/pgvector:pg16
    container_name: lightrag-cost-effective-postgres
    environment:
      POSTGRES_DB: lightrag
      POSTGRES_USER: lightrag_user
      POSTGRES_PASSWORD: lightrag_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
      # Performance tuning for single database handling multiple storage types
      POSTGRES_SHARED_BUFFERS: 512MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_MAINTENANCE_WORK_MEM: 128MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts-cost-effective:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lightrag_user -d lightrag"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lightrag-cost-effective-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  lightrag-cost-effective-network:
    driver: bridge