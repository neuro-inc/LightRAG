services:
  # LightRAG Application
  lightrag:
    container_name: lightrag
    image: ghcr.io/hkuds/lightrag:latest
    build:
      context: .
      dockerfile: Dockerfile
      tags:
        - ghcr.io/hkuds/lightrag:latest
    ports:
      - "${PORT:-9621}:9621"
    volumes:
      - ./data/rag_storage:/app/data/rag_storage
      - ./data/inputs:/app/data/inputs
      - ./config.ini:/app/config.ini
      - ./.env:/app/.env
    env_file:
      - .env
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - postgres
      - redis
      - neo4j
      - qdrant
      - milvus-standalone
    networks:
      - lightrag-network

  # PostgreSQL (for PGVector, KV storage, graph storage)
  postgres:
    image: pgvector/pgvector:pg16
    container_name: lightrag-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE:-lightrag}
      POSTGRES_USER: ${POSTGRES_USER:-lightrag_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-lightrag_pass}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - lightrag-network
    restart: unless-stopped

  # Redis (for KV storage and caching)
  redis:
    image: redis:7-alpine
    container_name: lightrag-redis
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - lightrag-network
    restart: unless-stopped

  # Neo4j (for graph storage)
  neo4j:
    image: neo4j:5.15
    container_name: lightrag-neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USERNAME:-neo4j}/${NEO4J_PASSWORD:-lightrag_neo4j}
      NEO4J_dbms_default__database: lightrag
      NEO4J_dbms_memory_heap_initial__size: 512M
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
      NEO4JLABS_PLUGINS: '["apoc"]'
    ports:
      - "${NEO4J_HTTP_PORT:-7475}:7474"
      - "${NEO4J_BOLT_PORT:-7688}:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - lightrag-network
    restart: unless-stopped

  # Qdrant (for vector storage)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: lightrag-qdrant
    ports:
      - "${QDRANT_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - lightrag-network
    restart: unless-stopped

  # Milvus (vector database)
  etcd:
    container_name: lightrag-milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - lightrag-network

  minio:
    container_name: lightrag-milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "${MINIO_PORT:-9001}:9001"
      - "${MINIO_API_PORT:-9000}:9000"
    volumes:
      - minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - lightrag-network

  milvus-standalone:
    container_name: lightrag-milvus-standalone
    image: milvusdb/milvus:v2.3.10
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "${MILVUS_PORT:-19530}:19530"
      - "${MILVUS_HTTP_PORT:-9091}:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - lightrag-network

  # ChromaDB (vector database)
  chromadb:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: lightrag-chromadb
    ports:
      - "${CHROMA_PORT:-8001}:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=FALSE
    networks:
      - lightrag-network
    restart: unless-stopped

  # MongoDB (for various storage backends)
  mongodb:
    image: mongo:7
    container_name: lightrag-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-lightrag_mongo}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-lightrag}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - lightrag-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  qdrant_data:
  etcd_data:
  minio_data:
  milvus_data:
  chroma_data:
  mongodb_data:

networks:
  lightrag-network:
    driver: bridge